name: CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    timeout-minutes: 3
    strategy:
      matrix:
        ruby: [3.2, 3.3]
      # limit parallel matrix cells to avoid overwhelming rubygems.org
      max-parallel: 2
    steps:
      - uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true

      - name: Compute Gemfile hash
        id: gemfile_hash
        run: |
          # compute hash of Gemfile to use in cache key
          if [ -f Gemfile ]; then echo "hash=$(sha1sum Gemfile | awk '{print $1}')" >> "$GITHUB_OUTPUT"; else echo "hash=missing" >> "$GITHUB_OUTPUT"; fi

      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ matrix.ruby }}-${{ steps.gemfile_hash.outputs.hash }}
          restore-keys: |
            ${{ runner.os }}-gems-${{ matrix.ruby }}-

      - name: Ensure no Gemfile.lock influence
        run: |
          # Remove any checked-in Gemfile.lock to force fresh resolution in CI
          if [ -f Gemfile.lock ]; then git rm -f --ignore-unmatch Gemfile.lock || true; fi

      - name: Install dependencies (fresh)
        run: |
          bundle config set --local path 'vendor/bundle'
          bundle config set --local without 'production'
          bundle install --jobs 1 --retry 2

      - name: Run unit tests
        run: bundle exec rake test:unit

  generate-appraisals:
    name: Generate Appraisals list
    runs-on: ubuntu-latest
    outputs:
      appraisals: ${{ steps.generate.outputs.appraisals }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2
          bundler-cache: true
      - name: Install dependencies (fresh)
        run: |
          bundle config set --local path 'vendor/bundle'
          bundle config set --local without 'production'
          bundle install --jobs 1 --retry 2
      - name: Generate appraisals JSON from `appraisal list`
        id: generate
        shell: bash
        run: |
          set -euo pipefail
          APPS=$(bundle exec appraisal list || true)
          if [ -z "${APPS}" ]; then
            echo "ERROR: 'appraisal list' returned no entries" >&2
            exit 2
          fi
          # Build JSON array safely without jq
          JSON=$(printf '%s\n' "$APPS" | awk 'NF{gsub(/"/,"\\\""); printf "%s\"%s\"", sep, $0; sep=","} END{print ""}')
          echo "appraisals=[$JSON]" >> "$GITHUB_OUTPUT"

  generator-tests:
    name: Generator tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        ruby: [3.2, 3.3]
        appraisal: ${{ fromJson(needs.generate-appraisals.outputs.appraisals) }}
      # limit parallel matrix cells to avoid overwhelming rubygems.org
      max-parallel: 2
    needs: generate-appraisals
    env:
      APPRAISAL: ${{ matrix.appraisal }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true

      - name: Install dependencies (fresh)
        run: |
          bundle config set --local path 'vendor/bundle'
          bundle config set --local without 'production'
          bundle install --jobs 1 --retry 2

      - name: Install appraisal gemfiles
        run: |
          bundle exec appraisal install

      - name: Cache Ruby gems (generator appraisal)
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ matrix.ruby }}-${{ matrix.appraisal }}
          restore-keys: |
            ${{ runner.os }}-gems-${{ matrix.ruby }}-${{ matrix.appraisal }}-
            ${{ runner.os }}-gems-${{ matrix.ruby }}-

      - name: Run generator tests via helper (suite-first)
        run: |
          echo "Running generators with APPRAISAL='${APPRAISAL}' (matrix='${{ matrix.appraisal }}')"
          bin/test generators

  system-tests:
    name: System tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        ruby: [3.2]
        appraisal: ${{ fromJson(needs.generate-appraisals.outputs.appraisals) }}
      max-parallel: 2
    needs: generate-appraisals
    env:
      APPRAISAL: ${{ matrix.appraisal }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true

      - name: Install dependencies (fresh)
        run: |
          bundle config set --local path 'vendor/bundle'
          bundle config set --local without 'production'
          bundle install --jobs 1 --retry 2

      - name: Install appraisal gemfiles
        run: |
          bundle exec appraisal install

      - name: Check installed browser (install if missing)
        run: |
          echo "which chrome/google-chrome chromium chromium-browser:"
          which google-chrome-stable || which google-chrome || which chrome || which chromium-browser || which chromium || true
          echo "versions:"
          google-chrome-stable --version 2>/dev/null || google-chrome --version 2>/dev/null || chrome --version 2>/dev/null || chromium-browser --version 2>/dev/null || chromium --version 2>/dev/null || echo "no chrome/chromium found"
          if ! (which google-chrome-stable || which google-chrome || which chrome || which chromium-browser || which chromium); then
            echo "Installing chromium..."
            sudo apt-get update -y
            sudo apt-get install -y chromium-browser --no-install-recommends
          fi

      - name: Run system tests via helper (suite-first)
        run: |
          echo "Running system with APPRAISAL='${APPRAISAL}' (matrix='${{ matrix.appraisal }}')"
          bin/test system
